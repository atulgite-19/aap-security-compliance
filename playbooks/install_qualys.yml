---
- name: Install and Configure Qualys Cloud Agent
  hosts: all
  become: yes
  gather_facts: yes

  tasks:

# ---------------------------------------------------------
# Linux - RedHat Family - Set facts, Download and Install
# ---------------------------------------------------------
    - block:
        - name: Ensure pip is installed
          package:
            name: python3-pip
            state: present
    
        - name: Ensure EPEL repository is installed
          package:
            name: epel-release
            state: present
          ignore_errors: yes

        - name: Ensure AWS and boto libraries are present
          package:
            name:
              - python3-boto3
              - python3-botocore
            state: present
          ignore_errors: yes
        
        - name: Check if Qualys Cloud Agent file already exists
          stat:
            path: /tmp/"{{ qualys_url }}"
          register: rpm_stat
        
        - name: Download Qualys Cloud Agent from S3
          amazon.aws.s3_object:
            bucket: "security-tools-storage"
            # object: "Linux_RPM_X64_QualysCloudAgent_7.1.0.37.rpm"
            object: "{{ qualys_url }}"
            dest: "/tmp/QualysCloudAgent.rpm"
            mode: get
            region: "us-east-1"
          when: not rpm_stat.stat.exists
          register: s3_download
        
        - name: Verify S3 download result
          debug:
            msg: "File downloaded successfully to {{ s3_download.dest }}"
          when:
            - not rpm_stat.stat.exists
            - s3_download is defined
            - s3_download.changed | default(false)
        
        - name: Install Qualys Cloud Agent RPM
          command: sudo rpm -ivh "/tmp/QualysCloudAgent.rpm"
        
        - name: Verify installation
          command: rpm -q qualys-cloud-agent
          register: verify_install
          changed_when: false
        
        - name: Display installed package
          debug:
            msg: "{{ verify_install.stdout }}"
        
      when: ansible_os_family == "RedHat"
  
    - block:
        - name: wait 30 seconds for full Qualys installation
          pause:
            seconds: 30
    
        - name: Configure Qualys Agent on RHEL
          command: "/usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh ActivationId={{ qualys_activation_id }} CustomerId={{ qualys_customer_id }}"
          args:
            chdir: "/usr/local/qualys/cloud-agent/bin"
          ignore_errors: true
    
        - name: Start Qualys service on RHEL
          systemd:
            name: qualys-cloud-agent.service
            state: started
            enabled: yes
    
      when: ansible_os_family == "RedHat"

# ---------------------------------------------------------
# Windows Family - Set facts, Download and Install
# ---------------------------------------------------------
    - block:
        - name: Set package filename for Windows
          set_fact:
            package_file: "Windows_QualysCloudAgent.exe"
          when: ansible_os_family == "Windows"
        
        - name: Download package from AWS S3
          win_get_url:
            url: "{{ qualys_url_windows }}"
            dest: "C:\\Temp\\{{ package_file }}"
          when: ansible_os_family == "Windows"
        
        - name: Install package from local path
          win_command: >
            C:\Temp\{{ package_file }} CustomerId={{ qualys_customer_id }} ActivationId={{ qualys_activation_id }} WebServiceUri=https://qagpublic.qg1.apps.qualys.com/CloudAgent/ /quiet /norestart
          ignore_errors: true
          register: script_output
          when: ansible_os_family == "Windows"
        
        - name: wait 30 seconds for full Qualys installation
          pause:
            seconds: 30
          when: ansible_os_family == "Windows"
        
        - name: Start Qualys Agent service on Windows
          win_service:
            name: "QualysAgent"
            state: started
            start_mode: auto
      
      when: ansible_os_family == "Windows"
    
# ---------------------------------
# Fail if no matching package
# ---------------------------------
    - block:
        - name: Fail if no package_file defined
          fail:
            msg: "No matching package defined for {{ ansible_distribution }} {{ ansible_architecture }}"
      when: package_file is not defined
